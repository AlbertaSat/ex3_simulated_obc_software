// ======================================================================
// \title  PolyPortAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Poly port
// ======================================================================

#include "F-Prime/Svc/PolyIf/PolyPortAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

namespace Svc {

  namespace {

    // ----------------------------------------------------------------------
    // Port buffer class
    // ----------------------------------------------------------------------

    class PolyPortBuffer : public Fw::SerializeBufferBase {

      public:

        NATIVE_UINT_TYPE getBuffCapacity() const {
          return InputPolyPort::SERIALIZED_SIZE;
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:

        U8 m_buff[InputPolyPort::SERIALIZED_SIZE];

    };

  }

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputPolyPort ::
    InputPolyPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
  {

  }

  void InputPolyPort ::
    init()
  {
    Fw::InputPortBase::init();
  }

  void InputPolyPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
    FW_ASSERT(callComp != nullptr);
    FW_ASSERT(funcPtr != nullptr);

    this->m_comp = callComp;
    this->m_func = funcPtr;
    this->m_connObj = callComp;
  }

  void InputPolyPort ::
    invoke(
        U32 entry,
        Svc::MeasurementStatus& status,
        Fw::Time& time,
        Fw::PolyType& val
    )
  {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

    FW_ASSERT(this->m_comp != nullptr);
    FW_ASSERT(this->m_func != nullptr);

    return this->m_func(this->m_comp, this->m_portNum, entry, status, time, val);
  }

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputPolyPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    Fw::SerializeStatus _status;

#if FW_PORT_SERIALIZATION == 1
    this->trace();
#endif

    FW_ASSERT(this->m_comp != nullptr);
    FW_ASSERT(this->m_func != nullptr);

    U32 entry;
    _status = _buffer.deserialize(entry);
    if (_status != Fw::FW_SERIALIZE_OK) {
      return _status;
    }

    Svc::MeasurementStatus status;
    _status = _buffer.deserialize(status);
    if (_status != Fw::FW_SERIALIZE_OK) {
      return _status;
    }

    Fw::Time time;
    _status = _buffer.deserialize(time);
    if (_status != Fw::FW_SERIALIZE_OK) {
      return _status;
    }

    Fw::PolyType val;
    _status = _buffer.deserialize(val);
    if (_status != Fw::FW_SERIALIZE_OK) {
      return _status;
    }

    this->m_func(this->m_comp, this->m_portNum, entry, status, time, val);

    return Fw::FW_SERIALIZE_OK;
  }

#endif

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputPolyPort ::
    OutputPolyPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
  {

  }

  void OutputPolyPort ::
    init()
  {
    Fw::OutputPortBase::init();
  }

  void OutputPolyPort ::
    addCallPort(InputPolyPort* callPort)
  {
    FW_ASSERT(callPort != nullptr);

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
#endif
  }

  void OutputPolyPort ::
    invoke(
        U32 entry,
        Svc::MeasurementStatus& status,
        Fw::Time& time,
        Fw::PolyType& val
    )
  {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

#if FW_PORT_SERIALIZATION
    FW_ASSERT((this->m_port != nullptr) || (this->m_serPort != nullptr));

    if (this->m_port != nullptr) {
      this->m_port->invoke(entry, status, time, val);
    }
    else {
      Fw::SerializeStatus _status;
      PolyPortBuffer _buffer;

      _status = _buffer.serialize(entry);
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));

      _status = _buffer.serialize(status);
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));

      _status = _buffer.serialize(time);
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));

      _status = _buffer.serialize(val);
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));

      _status = this->m_serPort->invokeSerial(_buffer);
      FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(_status));
    }
#else
    FW_ASSERT(this->m_port != nullptr);
    this->m_port->invoke(entry, status, time, val);
#endif
  }

}
