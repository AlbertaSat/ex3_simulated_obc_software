<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
BufferAccumulatorComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Svc" name="BufferAccumulator" kind="active">

  <import_enum_type>Svc/BufferAccumulator/BufferAccumulator_BlockModeEnumAi.xml</import_enum_type>
  <import_enum_type>Svc/BufferAccumulator/BufferAccumulator_OpStateEnumAi.xml</import_enum_type>
  <import_port_type>Fw/Buffer/BufferSendPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Svc/Ping/PingPortAi.xml</import_port_type>

  <ports>
    <port name="bufferSendInFill" data_type="Fw::BufferSend" kind="async_input" max_number="1" full="assert">
      <comment>
      Receive a Buffer from an upstream component to enqueue
      </comment>
    </port>
    <port name="bufferSendInReturn" data_type="Fw::BufferSend" kind="async_input" max_number="1" full="assert">
      <comment>
      Receive a Buffer back from a downstream component
      </comment>
    </port>
    <port name="bufferSendOutDrain" data_type="Fw::BufferSend" kind="output" max_number="1">
      <comment>
      Pass a Buffer onwards to a downstream component
      </comment>
    </port>
    <port name="bufferSendOutReturn" data_type="Fw::BufferSend" kind="output" max_number="1">
      <comment>
      Return a Buffer to the original upstream component
      </comment>
    </port>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Port for receiving commands
      </comment>
    </port>
    <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Port for sending command registration requests
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Port for sending command response
      </comment>
    </port>
    <port name="eventOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Event port for emitting events
      </comment>
    </port>
    <port name="eventOutText" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Event port for emitting text events
      </comment>
    </port>
    <port name="pingIn" data_type="Svc::Ping" kind="async_input" max_number="1" full="assert">
      <comment>
      Ping input port for health
      </comment>
    </port>
    <port name="pingOut" data_type="Svc::Ping" kind="output" max_number="1">
      <comment>
      Ping output port for health
      </comment>
    </port>
    <port name="timeCaller" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      A port for getting the time
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      A port for emitting telemetry
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0x0" mnemonic="BA_SetMode" full="assert">
      <comment>
      Set the mode
      </comment>
      <args>
        <arg name="mode" type="Svc::BufferAccumulator_OpState"/>
      </args>
    </command>
    <command kind="async" opcode="0x1" mnemonic="BA_DrainBuffers" full="assert">
      <comment>
      Drain the commanded number of buffers
      </comment>
      <args>
        <arg name="numToDrain" type="U32"/>
        <arg name="blockMode" type="Svc::BufferAccumulator_BlockMode"/>
      </args>
    </command>
  </commands>

  <events>
    <event id="0x0" name="BA_BufferAccepted" severity="ACTIVITY_HI" format_string="Buffer accepted">
      <comment>
      The Buffer Accumulator instance accepted and enqueued a buffer. To avoid uncontrolled sending of events, this event occurs only when the previous buffer received caused a QueueFull error.
      </comment>
    </event>
    <event id="0x1" name="BA_QueueFull" severity="WARNING_HI" format_string="Queue full">
      <comment>
      The Buffer Accumulator instance received a buffer when its queue was full. To avoid uncontrolled sending of events, this event occurs only when the previous buffer received did not cause a QueueFull error.
      </comment>
    </event>
    <event id="0x2" name="BA_StillDraining" severity="WARNING_HI" format_string="Still draining %u of %u">
      <comment>
      Got DrainBuffers command while executing DrainBuffers command
      </comment>
      <args>
        <arg name="numDrained" type="U32"/>
        <arg name="numToDrain" type="U32"/>
      </args>
    </event>
    <event id="0x3" name="BA_AlreadyDraining" severity="WARNING_HI" format_string="Already in DRAIN mode">
      <comment>
      Got DrainBuffers command while in DRAIN mode
      </comment>
    </event>
    <event id="0x4" name="BA_DrainStalled" severity="WARNING_HI" format_string="Drain stalling - only drained %u of %u">
      <comment>
      Ran out of buffers while executing DrainBuffers command
      </comment>
      <args>
        <arg name="numDrained" type="U32"/>
        <arg name="numToDrain" type="U32"/>
      </args>
    </event>
    <event id="0x5" name="BA_PartialDrainDone" severity="ACTIVITY_HI" format_string="Partial drain of %u finished">
      <comment>
      Finished DrainBuffers command
      </comment>
      <args>
        <arg name="numDrained" type="U32"/>
      </args>
    </event>
    <event id="0x6" name="BA_NonBlockDrain" severity="WARNING_LO" format_string="Only have %u; requested drain of %u">
      <comment>
      Not enough buffers to complete requested drain, and NOBLOCK was set; will only drain what we have
      </comment>
      <args>
        <arg name="numWillDrain" type="U32"/>
        <arg name="numReqDrain" type="U32"/>
      </args>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="BA_NumQueuedBuffers" data_type="U32" update="always">
      <comment>
      The number of buffers queued
      </comment>
    </channel>
  </telemetry>

</component>
