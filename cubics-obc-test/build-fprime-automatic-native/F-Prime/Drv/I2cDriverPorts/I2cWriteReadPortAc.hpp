// ======================================================================
// \title  I2cWriteReadPortAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for I2cWriteRead port
// ======================================================================

#ifndef Drv_I2cWriteReadPortAc_HPP
#define Drv_I2cWriteReadPortAc_HPP

#include <cstdio>
#include <cstring>

#include "Drv/I2cDriverPorts/I2cStatusEnumAc.hpp"
#include "FpConfig.hpp"
#include "Fw/Buffer/Buffer.hpp"
#include "Fw/Comp/PassiveComponentBase.hpp"
#include "Fw/Port/InputPortBase.hpp"
#include "Fw/Port/OutputPortBase.hpp"
#include "Fw/Types/StringType.hpp"

namespace Drv {

  //! Input I2cWriteRead port
  //! Write a set of bytes then read a set of bytes using the repeated start option
  class InputI2cWriteReadPort :
    public Fw::InputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representations of the port arguments
        SERIALIZED_SIZE =
          sizeof(U32) +
          Fw::Buffer::SERIALIZED_SIZE +
          Fw::Buffer::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The port callback function type
      typedef Drv::I2cStatus (*CompFuncPtr)(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        U32 addr,
        Fw::Buffer& writeBuffer,
        Fw::Buffer& readBuffer
      );

    public:

      // ----------------------------------------------------------------------
      // Input Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      InputI2cWriteReadPort();

      //! Initialization function
      void init();

      //! Register a component
      void addCallComp(
          Fw::PassiveComponentBase* callComp, //!< The containing component
          CompFuncPtr funcPtr //!< The port callback function
      );

      //! Invoke a port interface
      Drv::I2cStatus invoke(
          U32 addr, //!< I2C slave device address
          Fw::Buffer& writeBuffer, //!< Buffer to write data to the i2c device
          Fw::Buffer& readBuffer //!< Buffer to read back data from the i2c device, must set size when passing in read buffer
      );

    private:

#if FW_PORT_SERIALIZATION == 1

      //! Invoke the port with serialized arguments
      Fw::SerializeStatus invokeSerial(Fw::SerializeBufferBase& _buffer);

#endif

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the port callback function
      CompFuncPtr m_func;

  };

  //! Output I2cWriteRead port
  //! Write a set of bytes then read a set of bytes using the repeated start option
  class OutputI2cWriteReadPort :
    public Fw::OutputPortBase
  {

    public:

      // ----------------------------------------------------------------------
      // Output Port Member functions
      // ----------------------------------------------------------------------

      //! Constructor
      OutputI2cWriteReadPort();

      //! Initialization function
      void init();

      //! Register an input port
      void addCallPort(
          InputI2cWriteReadPort* callPort //!< The input port
      );

      //! Invoke a port interface
      Drv::I2cStatus invoke(
          U32 addr, //!< I2C slave device address
          Fw::Buffer& writeBuffer, //!< Buffer to write data to the i2c device
          Fw::Buffer& readBuffer //!< Buffer to read back data from the i2c device, must set size when passing in read buffer
      );

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The pointer to the input port
      InputI2cWriteReadPort* m_port;

  };

}

#endif
