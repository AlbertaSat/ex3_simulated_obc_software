// ======================================================================
// \title  I2cStatusEnumAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for I2cStatus enum
// ======================================================================

#include <cstring>
#include <limits>

#include "Fw/Types/Assert.hpp"
#include "F-Prime/Drv/I2cDriverPorts/I2cStatusEnumAc.hpp"

namespace Drv {

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  I2cStatus& I2cStatus ::
    operator=(const I2cStatus& obj)
  {
    this->e = obj.e;
    return *this;
  }

  I2cStatus& I2cStatus ::
    operator=(T e)
  {
    this->e = e;
    return *this;
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const I2cStatus& obj) {
    Fw::String s;
    obj.toString(s);
    os << s;
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  bool I2cStatus ::
    isValid() const
  {
    return ((e >= I2C_OK) && (e <= I2C_OTHER_ERR));
  }

  Fw::SerializeStatus I2cStatus ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    const Fw::SerializeStatus status = buffer.serialize(
        static_cast<SerialType>(this->e)
    );
    return status;
  }

  Fw::SerializeStatus I2cStatus ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    SerialType es;
    Fw::SerializeStatus status = buffer.deserialize(es);
    if (status == Fw::FW_SERIALIZE_OK) {
      this->e = static_cast<T>(es);
      if (!this->isValid()) {
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void I2cStatus ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String s;
    switch (e) {
      case I2C_OK:
        s = "I2C_OK";
        break;
      case I2C_ADDRESS_ERR:
        s = "I2C_ADDRESS_ERR";
        break;
      case I2C_WRITE_ERR:
        s = "I2C_WRITE_ERR";
        break;
      case I2C_READ_ERR:
        s = "I2C_READ_ERR";
        break;
      case I2C_OPEN_ERR:
        s = "I2C_OPEN_ERR";
        break;
      case I2C_OTHER_ERR:
        s = "I2C_OTHER_ERR";
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%d)", s.toChar(), e);
  }

#endif

}
