<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
BurnwireComponentAi.xml
Generated by fpp-to-xml
====================================================================== -->
<component namespace="Components" name="Burnwire" kind="active">

  <comment>
  Toggle burnwire transistors for deployables deployment.
  </comment>

  <import_enum_type>Fw/Types/OnEnumAi.xml</import_enum_type>
  <import_port_type>Drv/GpioDriverPorts/GpioWritePortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
  <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
  <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
  <import_port_type>Fw/Prm/PrmGetPortAi.xml</import_port_type>
  <import_port_type>Fw/Prm/PrmSetPortAi.xml</import_port_type>
  <import_port_type>Fw/Time/TimePortAi.xml</import_port_type>
  <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
  <import_port_type>Svc/Sched/SchedPortAi.xml</import_port_type>

  <ports>
    <port name="cmdIn" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
      <comment>
      Port for receiving commands
      </comment>
    </port>
    <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
      <comment>
      Port for sending command registrations
      </comment>
    </port>
    <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
      <comment>
      Port for sending command responses
      </comment>
    </port>
    <port name="gpioSet" data_type="Drv::GpioWrite" kind="output" max_number="1">
      <comment>
      Port sending calls to the GPIO driver
      </comment>
    </port>
    <port name="logOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
      <comment>
      Port for sending events to downlink
      </comment>
    </port>
    <port name="logTextOut" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
      <comment>
      Port for sending textual representation of events
      </comment>
    </port>
    <port name="prmGetOut" data_type="Fw::PrmGet" kind="output" role="ParamGet" max_number="1">
      <comment>
      Port to return the value of a parameter
      </comment>
    </port>
    <port name="prmSetOut" data_type="Fw::PrmSet" kind="output" role="ParamSet" max_number="1">
      <comment>
      Port to set the value of a parameter
      </comment>
    </port>
    <port name="run" data_type="Svc::Sched" kind="sync_input" max_number="1">
      <comment>
      Port receiving calls from the rate group
      </comment>
    </port>
    <port name="timeCaller" data_type="Fw::Time" kind="output" role="TimeGet" max_number="1">
      <comment>
      Port for requesting the current time
      </comment>
    </port>
    <port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
      <comment>
      Port for sending telemetry channels to downlink
      </comment>
    </port>
  </ports>

  <commands>
    <command kind="async" opcode="0xFF" mnemonic="ACTIVATE_BURNWIRE" full="assert">
      <comment>
      Comand to activate the burnwire
      </comment>
    </command>
  </commands>

  <events>
    <event id="0x0" name="SetBurnwireState" severity="ACTIVITY_HI" format_string="Set burnwire state to %s.">
      <comment>
      Reports the state of the burnwire GPIO
      </comment>
      <args>
        <arg name="state" type="Fw::On"/>
      </args>
    </event>
  </events>

  <telemetry>
    <channel id="0x0" name="BurnwireState" data_type="Fw::On" update="always">
      <comment>
      Telemetry channel to report burnwire state
      </comment>
    </channel>
    <channel id="0x4" name="BurnwireCounter" data_type="U32" update="always">
      <comment>
      Telemetry channel to report the time burnwire has been active since last activated
      </comment>
    </channel>
  </telemetry>

</component>
