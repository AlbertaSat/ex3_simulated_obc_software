// ======================================================================
// \title  BufferGetPortAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for BufferGet port
// ======================================================================

#include "F-Prime/Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

namespace Fw {

  // ----------------------------------------------------------------------
  // Input Port Member functions
  // ----------------------------------------------------------------------

  InputBufferGetPort ::
    InputBufferGetPort() :
      Fw::InputPortBase(),
      m_func(nullptr)
  {

  }

  void InputBufferGetPort ::
    init()
  {
    Fw::InputPortBase::init();
  }

  void InputBufferGetPort ::
    addCallComp(
        Fw::PassiveComponentBase* callComp,
        CompFuncPtr funcPtr
    )
  {
    FW_ASSERT(callComp != nullptr);
    FW_ASSERT(funcPtr != nullptr);

    this->m_comp = callComp;
    this->m_func = funcPtr;
    this->m_connObj = callComp;
  }

  Fw::Buffer InputBufferGetPort ::
    invoke(U32 size)
  {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

    FW_ASSERT(this->m_comp != nullptr);
    FW_ASSERT(this->m_func != nullptr);

    return this->m_func(this->m_comp, this->m_portNum, size);
  }

#if FW_PORT_SERIALIZATION == 1

  Fw::SerializeStatus InputBufferGetPort ::
    invokeSerial(Fw::SerializeBufferBase& _buffer)
  {
    // For ports with a return type, invokeSerial is not used
    (void) _buffer;

    FW_ASSERT(0);
    return Fw::FW_SERIALIZE_OK;
  }

#endif

  // ----------------------------------------------------------------------
  // Output Port Member functions
  // ----------------------------------------------------------------------

  OutputBufferGetPort ::
    OutputBufferGetPort() :
      Fw::OutputPortBase(),
      m_port(nullptr)
  {

  }

  void OutputBufferGetPort ::
    init()
  {
    Fw::OutputPortBase::init();
  }

  void OutputBufferGetPort ::
    addCallPort(InputBufferGetPort* callPort)
  {
    FW_ASSERT(callPort != nullptr);

    this->m_port = callPort;
    this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = nullptr;
#endif
  }

  Fw::Buffer OutputBufferGetPort ::
    invoke(U32 size)
  {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

    FW_ASSERT(this->m_port != nullptr);
    return this->m_port->invoke(size);
  }

}
