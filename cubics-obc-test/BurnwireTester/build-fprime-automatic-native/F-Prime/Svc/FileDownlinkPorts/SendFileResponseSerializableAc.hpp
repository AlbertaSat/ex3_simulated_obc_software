// ======================================================================
// \title  SendFileResponseSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SendFileResponse struct
// ======================================================================

#ifndef Svc_SendFileResponseSerializableAc_HPP
#define Svc_SendFileResponseSerializableAc_HPP

#include "FpConfig.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Svc/FileDownlinkPorts/SendFileStatusEnumAc.hpp"

namespace Svc {

  //! Send file response struct
  class SendFileResponse :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          Svc::SendFileStatus::SERIALIZED_SIZE +
          sizeof(U32)
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      SendFileResponse();

      //! Member constructor
      SendFileResponse(
          Svc::SendFileStatus::T status,
          U32 context
      );

      //! Copy constructor
      SendFileResponse(
          const SendFileResponse& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      SendFileResponse& operator=(
          const SendFileResponse& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const SendFileResponse& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const SendFileResponse& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const SendFileResponse& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserialize(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member status
      Svc::SendFileStatus::T getstatus() const
      {
        return this->status.e;
      }

      //! Get member context
      U32 getcontext() const
      {
        return this->context;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          Svc::SendFileStatus::T status,
          U32 context
      );

      //! Set member status
      void setstatus(Svc::SendFileStatus::T status);

      //! Set member context
      void setcontext(U32 context);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      Svc::SendFileStatus status;
      U32 context;

  };

}

#endif
