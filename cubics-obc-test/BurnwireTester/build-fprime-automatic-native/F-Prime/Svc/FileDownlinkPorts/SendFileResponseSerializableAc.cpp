// ======================================================================
// \title  SendFileResponseSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SendFileResponse struct
// ======================================================================

#include "cstdio"
#include "cstring"

#include "F-Prime/Svc/FileDownlinkPorts/SendFileResponseSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/StringUtils.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  SendFileResponse ::
    SendFileResponse() :
      Serializable(),
      status(Svc::SendFileStatus::STATUS_OK),
      context(0)
  {

  }

  SendFileResponse ::
    SendFileResponse(
        Svc::SendFileStatus::T status,
        U32 context
    ) :
      Serializable(),
      status(status),
      context(context)
  {

  }

  SendFileResponse ::
    SendFileResponse(const SendFileResponse& obj) :
      Serializable(),
      status(obj.status),
      context(obj.context)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SendFileResponse& SendFileResponse ::
    operator=(const SendFileResponse& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.status, obj.context);
    return *this;
  }

  bool SendFileResponse ::
    operator==(const SendFileResponse& obj) const
  {
    return (
      (this->status == obj.status) &&
      (this->context == obj.context)
    );
  }

  bool SendFileResponse ::
    operator!=(const SendFileResponse& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SendFileResponse& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus SendFileResponse ::
    serialize(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serialize(this->status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serialize(this->context);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus SendFileResponse ::
    deserialize(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserialize(this->status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserialize(this->context);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

#if FW_SERIALIZABLE_TO_STRING || BUILD_UT

  void SendFileResponse ::
    toString(Fw::StringBase& sb) const
  {
    static const char* formatString =
      "( "
      "status = %s, "
      "context = %" PRIu32 ""
      " )";

    // Declare strings to hold any serializable toString() arguments
    Fw::String statusStr;

    // Call toString for arrays and serializable types
    this->status.toString(statusStr);

    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void) snprintf(
      outputString,
      FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,
      formatString,
      statusStr.toChar(),
      this->context
    );

    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    sb = outputString;
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void SendFileResponse ::
    set(
        Svc::SendFileStatus::T status,
        U32 context
    )
  {
    this->status = status;
    this->context = context;
  }

  void SendFileResponse ::
    setstatus(Svc::SendFileStatus::T status)
  {
    this->status = status;
  }

  void SendFileResponse ::
    setcontext(U32 context)
  {
    this->context = context;
  }

}
